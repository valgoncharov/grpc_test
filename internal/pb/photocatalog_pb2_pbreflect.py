"""
Generated by pbreflect (https://github.com/ValeriyMenshikov/pbreflect).

Generated client code for  using pbreflect.

This module contains auto-generated gRPC client classes for the  package.
It provides strongly-typed sync gRPC clients that follow the "duck typing" principle.
"""

import grpc
from typing import (
    List,
    Optional,
    Iterator,
    Tuple,
    Iterable,
)

from internal.pb.photocatalog_pb2 import (
    IdRequest,
    CountRequest,
    PhotoRequest,
    PhotoResponse,
    UploadStatusResponse,
)


class _PhotoCatalogServiceStub:
    """Internal stub class for PhotoCatalogService service.

    This class provides direct access to the gRPC methods exposed by the service.
    It should not be used directly, but through the PhotoCatalogServiceClient class.
    """

    def __init__(self, channel: grpc.Channel) -> None:
        """Initialize the stub with a gRPC channel.

        Args:
            channel: gRPC channel for communication
        """
        self.Photo = channel.unary_unary(
            "/PhotoCatalogService/Photo",
            request_serializer=IdRequest.SerializeToString,
            response_deserializer=PhotoResponse.FromString,
        )
        self.AddPhoto = channel.unary_unary(
            "/PhotoCatalogService/AddPhoto",
            request_serializer=PhotoRequest.SerializeToString,
            response_deserializer=PhotoResponse.FromString,
        )
        self.RandomPhotos = channel.unary_stream(
            "/PhotoCatalogService/RandomPhotos",
            request_serializer=CountRequest.SerializeToString,
            response_deserializer=PhotoResponse.FromString,
        )
        self.AddPhotos = channel.stream_unary(
            "/PhotoCatalogService/AddPhotos",
            request_serializer=PhotoRequest.SerializeToString,
            response_deserializer=UploadStatusResponse.FromString,
        )


class PhotoCatalogServiceClient:
    """Client for the PhotoCatalogService service.

    This class provides a strongly-typed sync interface to the gRPC service.
    """

    def __init__(self, channel: grpc.Channel) -> None:
        """Initialize the client with a gRPC channel.

        Args:
            channel: gRPC channel for communication
        """
        self._stub = _PhotoCatalogServiceStub(channel)

    def photo(
        self,
        request: IdRequest,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> PhotoResponse:
        call = self._stub.Photo(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call

    def add_photo(
        self,
        request: PhotoRequest,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> PhotoResponse:
        call = self._stub.AddPhoto(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call

    def random_photos(
        self,
        request: CountRequest,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> Iterable[PhotoResponse]:
        call = self._stub.RandomPhotos(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call

    def add_photos(
        self,
        request_iterator: Iterator[PhotoRequest],
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> UploadStatusResponse:
        call = self._stub.AddPhotos(
            request_iterator,
            metadata=metadata,
            timeout=timeout,
        )
        return call