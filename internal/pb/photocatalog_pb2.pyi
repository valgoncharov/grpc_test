"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from builtins import (
    bool,
    int,
    str,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
)
from google.protobuf.message import (
    Message,
)
from google.protobuf.timestamp_pb2 import (
    Timestamp,
)
from typing import (
    Literal,
    final,
    overload,
)

DESCRIPTOR: FileDescriptor


IdRequest: IdRequest

class IdRequest(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    id: str
    def __init__(
        self,
        *,
        id: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_id", b"_id", "id", b"id"]) -> bool: ...
    def ClearField(self, field_name: Literal["_id", b"_id", "id", b"id"]) -> None: ...
    def WhichOneof(self, oneof_group: Literal["_id", b"_id"]) -> Literal["id"] | None: ...


CountRequest: CountRequest

class CountRequest(Message):
    DESCRIPTOR: Descriptor

    COUNT_FIELD_NUMBER: int
    count: int
    def __init__(
        self,
        *,
        count: int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_count", b"_count", "count", b"count"]) -> bool: ...
    def ClearField(self, field_name: Literal["_count", b"_count", "count", b"count"]) -> None: ...
    def WhichOneof(self, oneof_group: Literal["_count", b"_count"]) -> Literal["count"] | None: ...


PhotoRequest: PhotoRequest

class PhotoRequest(Message):
    DESCRIPTOR: Descriptor

    DESCRIPTION_FIELD_NUMBER: int
    CONTENT_FIELD_NUMBER: int
    description: str
    content: str
    def __init__(
        self,
        *,
        description: str | None = ...,
        content: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_content", b"_content", "_description", b"_description", "content", b"content", "description", b"description"]) -> bool: ...
    def ClearField(self, field_name: Literal["_content", b"_content", "_description", b"_description", "content", b"content", "description", b"description"]) -> None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_content", b"_content"]) -> Literal["content"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_description", b"_description"]) -> Literal["description"] | None: ...


PhotoResponse: PhotoResponse

class PhotoResponse(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    DESCRIPTION_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    CONTENT_FIELD_NUMBER: int
    id: str
    description: str
    content: str
    @property
    def timestamp(self) -> Timestamp: ...
    def __init__(
        self,
        *,
        id: str | None = ...,
        description: str | None = ...,
        timestamp: Timestamp | None = ...,
        content: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_content", b"_content", "_description", b"_description", "_id", b"_id", "_timestamp", b"_timestamp", "content", b"content", "description", b"description", "id", b"id", "timestamp", b"timestamp"]) -> bool: ...
    def ClearField(self, field_name: Literal["_content", b"_content", "_description", b"_description", "_id", b"_id", "_timestamp", b"_timestamp", "content", b"content", "description", b"description", "id", b"id", "timestamp", b"timestamp"]) -> None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_content", b"_content"]) -> Literal["content"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_description", b"_description"]) -> Literal["description"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_id", b"_id"]) -> Literal["id"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_timestamp", b"_timestamp"]) -> Literal["timestamp"] | None: ...


UploadStatusResponse: UploadStatusResponse

class UploadStatusResponse(Message):
    DESCRIPTOR: Descriptor

    SUCCESS_FIELD_NUMBER: int
    MESSAGE_FIELD_NUMBER: int
    UPLOADED_IDS_FIELD_NUMBER: int
    success: bool
    message: str
    @property
    def uploaded_ids(self) -> RepeatedScalarFieldContainer[str]: ...
    def __init__(
        self,
        *,
        success: bool | None = ...,
        message: str | None = ...,
        uploaded_ids: Iterable[str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_message", b"_message", "_success", b"_success", "message", b"message", "success", b"success"]) -> bool: ...
    def ClearField(self, field_name: Literal["_message", b"_message", "_success", b"_success", "message", b"message", "success", b"success", "uploaded_ids", b"uploaded_ids"]) -> None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_message", b"_message"]) -> Literal["message"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_success", b"_success"]) -> Literal["success"] | None: ...